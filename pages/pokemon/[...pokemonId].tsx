import { useModal, useNotificationToast } from "@sumup/circuit-ui";
import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import { PokemonDetailPage, PokemonDetailModalContent } from "../../components";
import {
  CardPokemonItem,
  getPokemonImageSrc,
  MY_POKEMON_LIST_STORAGE_KEY,
  pokemonMoveListToTagPokemonMoveList,
  pokemonTypeListToTagPokemonTypeList,
  usePokemonDetail,
} from "../../modules";
import { capitalizeFirstLetterOfEachWord, useLocalStorage } from "../../shared";

type CatchStatus = "success" | "failed";
const catchStatus: CatchStatus[] = ["success", "failed"];
const catchPokemon = (statusList: CatchStatus[]) =>
  statusList[Math.floor(Math.random() * statusList.length)];

const PokemonDetailPageContainer: NextPage = () => {
  const router = useRouter();
  const pokemonId = router.query?.pokemonId
    ? Number(router.query?.pokemonId)
    : NaN;
  const inValidSlug = isNaN(pokemonId);

  const { setModal } = useModal();
  const { setToast } = useNotificationToast();

  const { setValue: setMyPokemonList } = useLocalStorage<CardPokemonItem[]>(
    MY_POKEMON_LIST_STORAGE_KEY,
    []
  );

  const pokemonDetailQuery = usePokemonDetail({
    pokemonId: inValidSlug ? 0 : pokemonId,
  });

  if (inValidSlug) {
    return null;
  }

  const isLoading = pokemonDetailQuery.loading;
  const pokemonName = pokemonDetailQuery.data?.pokemon_v2_pokemon_by_pk.name
    ? capitalizeFirstLetterOfEachWord(
        pokemonDetailQuery.data?.pokemon_v2_pokemon_by_pk.name
      )
    : "Empty";
  const pokemonImage = getPokemonImageSrc(pokemonId);
  const pokemonMoves = pokemonDetailQuery.data
    ? pokemonMoveListToTagPokemonMoveList(pokemonDetailQuery.data)
    : [];
  const pokemonTypes = pokemonDetailQuery.data
    ? pokemonTypeListToTagPokemonTypeList(pokemonDetailQuery.data)
    : [];

  const handleSuccessCatch = (pokemonNickname: string) => {
    setMyPokemonList((prevValue) => {
      return [
        ...prevValue,
        {
          id: pokemonId,
          title: pokemonNickname,
          image: {
            src: pokemonImage,
            alt: pokemonName,
          },
        },
      ];
    });

    setToast({
      body: "Named the pokemon!",
    });
  };

  const handleClickCatchPokemon = () => {
    const currentStatus: CatchStatus = catchPokemon(catchStatus);
    if (currentStatus === "success") {
      setModal({
        children: (
          <PokemonDetailModalContent
            onSubmit={(pokemonNickname) => {
              handleSuccessCatch(pokemonNickname);
            }}
          />
        ),
        variant: "immersive",
        closeButtonLabel: "Close modal",
      });
    } else {
      setToast({
        body: "Failed... Trg again!",
        variant: "alert",
      });
    }
  };
  return (
    <>
      <Head>
        <title>Pokemon Detail</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <PokemonDetailPage
        isLoading={isLoading}
        heroImageSrc={pokemonImage}
        heroImageAlt={pokemonName}
        pokemonMovesList={pokemonMoves}
        pokemonTypeList={pokemonTypes}
        pokemonName={pokemonName}
        onCatchPokemon={handleClickCatchPokemon}
      />
    </>
  );
};

export default PokemonDetailPageContainer;
